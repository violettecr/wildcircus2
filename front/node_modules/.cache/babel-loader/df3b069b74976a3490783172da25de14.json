{"ast":null,"code":"import _objectSpread from \"/home/violette/Bureau/projet3/FRONT_COPIE_nantes-0919-js-CGouestre-front (copie)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/violette/Bureau/projet3/FRONT_COPIE_nantes-0919-js-CGouestre-front (copie)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/violette/Bureau/projet3/FRONT_COPIE_nantes-0919-js-CGouestre-front (copie)/src/Components/Adverts/AdvertsPage.jsx\";\nimport React, { useState, useEffect, Fragment, useContext } from 'react';\nimport CardMap from '../Map/CardMap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCrosshairs, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport AdvertsList from './AdvertsList';\nimport axios from 'axios';\nimport '../css/AdvertsPage.css';\nimport Navbar from '../Navbar/Navbar';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { CtxAdverts } from '../CtxAdverts';\nimport { apiEndPoint } from '../../config';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst AdvertsPage = () => {\n  const _useContext = useContext(CtxAdverts),\n        _useContext2 = _slicedToArray(_useContext, 1),\n        adverts = _useContext2[0];\n\n  const _useState = useState([{\n    types: 1,\n    location: \"\",\n    keywords: \"\",\n    category: null\n  }]),\n        _useState2 = _slicedToArray(_useState, 2),\n        filters = _useState2[0],\n        setFilters = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newCities = _useState4[0],\n        setNewCities = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        services = _useState6[0],\n        setServices = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        pensions = _useState8[0],\n        setPensions = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        activites = _useState10[0],\n        setActivites = _useState10[1];\n\n  const _useState11 = useState([]),\n        _useState12 = _slicedToArray(_useState11, 2),\n        ventes = _useState12[0],\n        setVentes = _useState12[1];\n\n  const _useState13 = useState(1),\n        _useState14 = _slicedToArray(_useState13, 2),\n        types = _useState14[0],\n        setTypes = _useState14[1];\n\n  const _useState15 = useState(null),\n        _useState16 = _slicedToArray(_useState15, 2),\n        category = _useState16[0],\n        setCategory = _useState16[1];\n\n  const _useState17 = useState(\"\"),\n        _useState18 = _slicedToArray(_useState17, 2),\n        keyWord = _useState18[0],\n        setKeyWord = _useState18[1];\n\n  const _useState19 = useState(\"\"),\n        _useState20 = _slicedToArray(_useState19, 2),\n        location = _useState20[0],\n        setLocation = _useState20[1];\n\n  const _useState21 = useState(0),\n        _useState22 = _slicedToArray(_useState21, 2),\n        latitude = _useState22[0],\n        setLatitude = _useState22[1];\n\n  const _useState23 = useState(0),\n        _useState24 = _slicedToArray(_useState23, 2),\n        longitude = _useState24[0],\n        setLongitude = _useState24[1];\n\n  useEffect(() => {\n    axios.get(`${apiEndPoint}/category/echanges`).then(result => {\n      setServices(result.data);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get(`${apiEndPoint}/category/pensions`).then(result => {\n      setPensions(result.data);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get(`${apiEndPoint}/category/activites`).then(result => {\n      setActivites(result.data);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get(`${apiEndPoint}/category/ventes`).then(result => {\n      setVentes(result.data);\n    });\n  }, []);\n\n  const handleType = () => {\n    if (types === 1) {\n      setFilters(_objectSpread({}, filters, {\n        types: 0\n      }));\n      setTypes(0);\n    } else {\n      setFilters(_objectSpread({}, filters, {\n        types: 1\n      }));\n      setTypes(1);\n    }\n  };\n\n  const handleCategory = e => {\n    setFilters(_objectSpread({}, filters, {\n      category: Number(e.target.value)\n    }));\n    setCategory(Number(e.target.value));\n  };\n\n  const handleKeyWord = e => {\n    setFilters(_objectSpread({}, filters, {\n      keywords: e.target.value\n    }));\n    setKeyWord(e.target.value);\n  }; // ---------------Bouton Geolocalisation----------------//\n\n\n  const handleLocation = e => {\n    e.preventDefault();\n    navigator.geolocation.getCurrentPosition(position => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n      axios.get(`https://geo.api.gouv.fr/communes?lat=${position.coords.latitude}&lon=${position.coords.longitude}&fields=nom,departement,codesPostaux`).then(response => {\n        const codes = response.data[0].codesPostaux;\n        const loc = `${Math.min(...codes)} ${response.data[0].nom} - ${response.data[0].departement.nom}`;\n        setFilters(_objectSpread({}, filters, {\n          location: loc\n        }));\n        setLocation(loc);\n      });\n    });\n  }; // ---------------AUTOCOMPLETION----------------//\n\n\n  const handleNewCities = e => {\n    setFilters(_objectSpread({}, filters, {\n      location: e.currentTarget.textContent\n    }));\n    setLocation(e.currentTarget.textContent);\n    axios.get(`https://geo.api.gouv.fr/communes?nom=${e.target.value}&fields=nom,departement,codesPostaux,centre&boost=population&limit=20`).then(response => {\n      if (response.data.length > 0) {\n        let cities = [];\n        response.data.forEach(city => {\n          if (city.departement) {\n            const codes = city.codesPostaux;\n            cities = [...cities, Math.min(...codes) + ' ' + city.nom + ' - ' + city.departement.nom];\n          } else {\n            cities = [...cities, city.nom];\n          }\n\n          ;\n        });\n        setNewCities(cities);\n      } else {\n        setNewCities([]);\n      }\n    });\n  }; // ---------------Récuperation coordonées après autocompletion----------------//\n\n\n  useEffect(() => {\n    setLatitude('');\n    setLongitude('');\n\n    if (location.split(' ').length > 1 && latitude === '') {\n      const code = location.split(' ')[0];\n      axios.get(`https://geo.api.gouv.fr/communes?codePostal=${code}&fields=centre`).then(response => {\n        const lat = response.data[0].centre.coordinates[1];\n        const long = response.data[0].centre.coordinates[0];\n        setLatitude(lat);\n        setLongitude(long);\n      });\n    }\n  }, [location]); // ---------------Filtres----------------//\n\n  const handleFilters = () => {\n    return adverts.filter(advert => {\n      if (category) {\n        return advert.category_id === category;\n      } else {\n        return advert;\n      }\n    }).filter(advert => {\n      return advert.types === types;\n    }).filter(advert => {\n      return advert.title.toLowerCase().includes(keyWord.toLowerCase());\n    }).filter(advert => {\n      return advert.location.toLowerCase().includes(location.toLowerCase());\n    });\n  };\n\n  const nbResultats = () => {\n    return handleFilters(adverts).map(advert => {\n      return advert;\n    });\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"advertsPage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"top-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(Card, {\n    id: \"card-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Rechercher une annonce\"), React.createElement(RadioGroup, {\n    id: \"radio\",\n    \"aria-label\": \"position\",\n    name: \"position\",\n    onChange: handleType,\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    checked: types,\n    control: React.createElement(Radio, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }),\n    label: \"Offres\",\n    labelPlacement: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(FormControlLabel, {\n    checked: !types,\n    control: React.createElement(Radio, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }),\n    label: \"Demandes\",\n    labelPlacement: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"age-native-simple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Choisir une cat\\xE9gorie\"), React.createElement(Select, {\n    native: true,\n    onChange: handleCategory,\n    inputProps: {\n      name: 'age',\n      id: 'age-native-simple'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), React.createElement(\"optgroup\", {\n    label: \"Echanges de services\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, services.map(category => {\n    return React.createElement(\"option\", {\n      value: category.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, category.name);\n  })), React.createElement(\"optgroup\", {\n    label: \"Pensions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, pensions.map(category => {\n    return React.createElement(\"option\", {\n      value: category.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, category.name);\n  })), React.createElement(\"optgroup\", {\n    label: \"Activit\\xE9s et balades\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, activites.map(category => {\n    return React.createElement(\"option\", {\n      value: category.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, category.name);\n  })), React.createElement(\"optgroup\", {\n    label: \"Ventes/Dons/Locations\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, ventes.map(category => {\n    return React.createElement(\"option\", {\n      value: category.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, category.name);\n  })))), React.createElement(TextField, {\n    id: \"standard-basic\",\n    label: \"Rechercher par mots cl\\xE9s\",\n    onChange: handleKeyWord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"location\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: handleLocation,\n    color: \"primary\",\n    \"aria-label\": \"directions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(NavigationIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  })), React.createElement(Autocomplete, {\n    onChange: handleNewCities,\n    className: \"autocomplete\",\n    autoSelect: true,\n    id: \"free-solo-demo\",\n    freeSolo: true,\n    value: location,\n    options: newCities,\n    renderInput: params => React.createElement(TextField, Object.assign({}, params, {\n      onChange: handleNewCities,\n      label: \"Ville\",\n      margin: \"normal\",\n      variant: \"standard\",\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: \"nb-resultats\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, nbResultats().length, \" R\\xE9sultats\"))))), React.createElement(\"div\", {\n    className: \"middlePage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"map\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, React.createElement(CardMap, {\n    handleFilters: handleFilters,\n    latitude: latitude,\n    longitude: longitude,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    id: \"advertList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(AdvertsList, {\n    handleFilters: handleFilters,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  })))));\n};\n\nexport default AdvertsPage;","map":{"version":3,"sources":["/home/violette/Bureau/projet3/FRONT_COPIE_nantes-0919-js-CGouestre-front (copie)/src/Components/Adverts/AdvertsPage.jsx"],"names":["React","useState","useEffect","Fragment","useContext","CardMap","FontAwesomeIcon","faCrosshairs","faSearch","AdvertsList","axios","Navbar","TextField","Autocomplete","CtxAdverts","apiEndPoint","InputLabel","FormControl","Select","NavigationIcon","Radio","RadioGroup","FormControlLabel","IconButton","Card","CardContent","AdvertsPage","adverts","types","location","keywords","category","filters","setFilters","newCities","setNewCities","services","setServices","pensions","setPensions","activites","setActivites","ventes","setVentes","setTypes","setCategory","keyWord","setKeyWord","setLocation","latitude","setLatitude","longitude","setLongitude","get","then","result","data","handleType","handleCategory","e","Number","target","value","handleKeyWord","handleLocation","preventDefault","navigator","geolocation","getCurrentPosition","position","coords","response","codes","codesPostaux","loc","Math","min","nom","departement","handleNewCities","currentTarget","textContent","length","cities","forEach","city","split","code","lat","centre","coordinates","long","handleFilters","filter","advert","category_id","title","toLowerCase","includes","nbResultats","map","name","id","params"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment, useContext } from 'react';\nimport CardMap from '../Map/CardMap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCrosshairs, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport AdvertsList from './AdvertsList';\nimport axios from 'axios';\nimport '../css/AdvertsPage.css';\nimport Navbar from '../Navbar/Navbar';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { CtxAdverts } from '../CtxAdverts';\nimport { apiEndPoint } from '../../config';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst AdvertsPage = () => {\n  const [adverts] = useContext(CtxAdverts);\n  const [filters, setFilters] = useState([{ types: 1, location: \"\", keywords: \"\", category: null }]);\n  const [newCities, setNewCities] = useState([]);\n  const [services, setServices] = useState([]);\n  const [pensions, setPensions] = useState([]);\n  const [activites, setActivites] = useState([]);\n  const [ventes, setVentes] = useState([]);\n  const [types, setTypes] = useState(1);\n\tconst [category, setCategory] = useState(null);\n\tconst [keyWord, setKeyWord] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n\n  useEffect(() => {\n\t\taxios.get(`${apiEndPoint}/category/echanges`)\n\t\t\t.then(result => {\n\t\t\t\tsetServices(result.data)\n\t\t\t})\n  }, [])\n  \n  useEffect(() => {\n\t\taxios.get(`${apiEndPoint}/category/pensions`)\n\t\t\t.then(result => {\n\t\t\t\tsetPensions(result.data)\n\t\t\t})\n  }, [])\n  \n  useEffect(() => {\n\t\taxios.get(`${apiEndPoint}/category/activites`)\n\t\t\t.then(result => {\n\t\t\t\tsetActivites(result.data)\n\t\t\t})\n  }, [])\n  \n  useEffect(() => {\n\t\taxios.get(`${apiEndPoint}/category/ventes`)\n\t\t\t.then(result => {\n\t\t\t\tsetVentes(result.data)\n\t\t\t})\n\t}, [])\n\n\tconst handleType = () => {\n\t\tif (types === 1) {\n      setFilters({...filters, types: 0});\n\t\t\tsetTypes(0);\n\t\t} else {\n      setFilters({...filters, types: 1});\n\t\t\tsetTypes(1);\n\t\t}\n\t}\n\tconst handleCategory = (e) => {\n    setFilters({...filters, category: Number(e.target.value)});\n\t\tsetCategory(Number(e.target.value));\n\t}\n\tconst handleKeyWord = (e) => {\n    setFilters({...filters, keywords: e.target.value});\n\t\tsetKeyWord(e.target.value);\n\t}\n  \n  // ---------------Bouton Geolocalisation----------------//\n  const handleLocation = (e) => {\n    e.preventDefault();\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n      axios.get(`https://geo.api.gouv.fr/communes?lat=${position.coords.latitude}&lon=${position.coords.longitude}&fields=nom,departement,codesPostaux`)\n        .then((response) => {\n          const codes = response.data[0].codesPostaux\n          const loc = `${Math.min(...codes)} ${response.data[0].nom} - ${response.data[0].departement.nom}`;\n          setFilters({...filters, location: loc});\n          setLocation(loc);\n          \n        });\n    });\n  };\n\n  // ---------------AUTOCOMPLETION----------------//\n\tconst handleNewCities = (e) => {\n    setFilters({...filters, location: e.currentTarget.textContent});\n    setLocation(e.currentTarget.textContent);\n    axios.get(`https://geo.api.gouv.fr/communes?nom=${e.target.value}&fields=nom,departement,codesPostaux,centre&boost=population&limit=20`)\n      .then(response => {\n        if (response.data.length > 0) {\n          let cities = [];\n          response.data.forEach((city) => {\n            if (city.departement) {\n              const codes = city.codesPostaux\n              cities = [...cities, Math.min(...codes) + ' ' + city.nom + ' - ' + city.departement.nom]\n            } else {\n              cities = [...cities, city.nom]\n            };\n          });\n          setNewCities(cities);\n        } else {\n          setNewCities([]);\n        }\n      });\n  };\n\n  // ---------------Récuperation coordonées après autocompletion----------------//\n  useEffect(() => {\n    setLatitude(''); \n    setLongitude('');\n    if(location.split(' ').length > 1 && latitude === ''){\n      const code = location.split(' ')[0]\n      axios.get(`https://geo.api.gouv.fr/communes?codePostal=${code}&fields=centre`)\n        .then(response => {\n          const lat = response.data[0].centre.coordinates[1];\n          const long = response.data[0].centre.coordinates[0];\n          setLatitude(lat);\n          setLongitude(long);\n        })\n    }\n  }, [location]);\n\n// ---------------Filtres----------------//\n  const handleFilters = () => {\n    return adverts.filter((advert) => {\n      if(category){\n        return advert.category_id === category\n      }else{\n        return advert\n      }})\n      .filter((advert) => {\n        return advert.types === types})\n      .filter((advert) => {\n        return advert.title.toLowerCase().includes(keyWord.toLowerCase())})\n      .filter((advert) => {\n        return advert.location.toLowerCase().includes(location.toLowerCase())})\n      }\n\n      const nbResultats = () => {\n        return handleFilters(adverts).map((advert) => {\n          return advert\n        });\n      };\n\n\treturn (\n    <Fragment> \n      <Navbar/>\n      \n      <div id=\"advertsPage\">\n        <div id=\"top-page\">\n            <Card id=\"card-form\">\n              <CardContent>\n                <form>\n                  <h2>Rechercher une annonce</h2>\n                  <RadioGroup id=\"radio\" aria-label=\"position\" name=\"position\" onChange={handleType} row>\n                    <FormControlLabel\n                      checked={types}\n                      control={<Radio color=\"primary\" />}\n                      label=\"Offres\"\n                      labelPlacement=\"top\"\n                    />\n                    <FormControlLabel\n                      checked={!types}\n                      control={<Radio color=\"primary\" />}\n                      label=\"Demandes\"\n                      labelPlacement=\"top\"\n                    />\n                  </RadioGroup>\n\n                  <FormControl>\n                    <InputLabel htmlFor=\"age-native-simple\">Choisir une catégorie</InputLabel>\n                    <Select\n                      native\n                      onChange={handleCategory}\n                      inputProps={{\n                        name: 'age',\n                        id: 'age-native-simple',\n                      }}\n                    >\n                      <option></option>\n                      <optgroup label=\"Echanges de services\">\n                      {services.map((category) => {\n                      return <option value={category.id}>{category.name}</option>\n                      })}\n                      </optgroup>\n                      <optgroup label=\"Pensions\">\n                        {pensions.map((category) => {\n                        return <option value={category.id}>{category.name}</option>\n                      })}\n                      </optgroup>          \n                      <optgroup label=\"Activités et balades\">\n                        {activites.map((category) => {\n                          return <option value={category.id}>{category.name}</option>\n                        })}\n                      </optgroup>\n                      <optgroup label=\"Ventes/Dons/Locations\">\n                        {ventes.map((category) => {\n                          return <option value={category.id}>{category.name}</option>\n                        })}\n                      </optgroup>\n                    </Select>\n                  </FormControl>\n\n                  <TextField id=\"standard-basic\" label=\"Rechercher par mots clés\" onChange={handleKeyWord} />\n\n                  <div id=\"location\"> \n                    <IconButton onClick={handleLocation} color=\"primary\" aria-label=\"directions\">\n                      <NavigationIcon />\n                    </IconButton>\n                    <Autocomplete\n                      onChange={handleNewCities}\n                      className=\"autocomplete\"\n                      autoSelect={true}\n                      id=\"free-solo-demo\"\n                      freeSolo\n                      value={location}\n                      options={newCities}\n                      renderInput={params => (\n                        <TextField {...params} onChange={handleNewCities} label=\"Ville\" margin=\"normal\" variant=\"standard\" fullWidth />\n                      )}\n                    />\n                  </div>\n                  <p className=\"nb-resultats\">{nbResultats().length} Résultats</p>\n                </form>\n                \n              </CardContent>\n            </Card>\n          </div>\n        <div className=\"middlePage\">\n          <div className=\"map\">\n            <CardMap \n            handleFilters={handleFilters}\n            latitude={latitude}\n            longitude={longitude} />\n          </div>\n          <div id=\"advertList\">\n            <AdvertsList handleFilters={handleFilters} />\n          </div>   \n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default AdvertsPage;\n"]},"metadata":{},"sourceType":"module"}